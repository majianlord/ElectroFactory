{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ElectroFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Pricing_Table_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "manufact",
						"type": "varchar"
					},
					{
						"name": "part",
						"type": "varchar"
					},
					{
						"name": "weblink",
						"type": "varchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "delivery",
						"type": "varchar"
					},
					{
						"name": "oq1",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op1",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq2",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op2",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq3",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op3",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq4",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op4",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq5",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op5",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq6",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op6",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq7",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op7",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq8",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op8",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq9",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op9",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq10",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op10",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq11",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op11",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "vdesc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_Inventory_Export2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pricing_Table_3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "manufact",
						"type": "varchar"
					},
					{
						"name": "part",
						"type": "varchar"
					},
					{
						"name": "weblink",
						"type": "varchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "delivery",
						"type": "varchar"
					},
					{
						"name": "oq1",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op1",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq2",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op2",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq3",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op3",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq4",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op4",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq5",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op5",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq6",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op6",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq7",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op7",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq8",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op8",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq9",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op9",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq10",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op10",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq11",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op11",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "vdesc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_Inventory_Export3"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/epdso1_ECIA_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "lin_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "out_text",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_ecia_global_standard_region"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every other Week')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "Transfer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     FileNAme as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: '/* Rev 1 - Set to look back at last 365 days.  Will be running weekly.  Only thing Revenue Analytics might want is unit cost and unit price.  TD 3-16-23\\n*/\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', round(-((x.unit_cost / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  \\n  x.trx_qty > 0 and x.ship_debit_amt = 0 and x.unit_cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Regular shipments (cost and resale are both greater than zero) with a ship and debit\\nselect  x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', ((x.unit_cost -(x.ship_debit_amt / x.trx_qty))  * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', round(-(((x.unit_cost - (x.ship_debit_amt / x.trx_Qty)) / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.ship_debit_amt <> 0 and x.unit_cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Shipment quantity is greater than zero, unit price is greater than zero, cost is zero, margin is 100% on all lines\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'100\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                         else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.unit_cost = \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and  x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Shipment quantity is greater than zero, unit price is zero, cost is greater than zero, margin is 0% on all lines\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.unit_cost > \\'0\\' and x.unit_price = \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Shipment quantity is zero, margin is 0% on all lines, for reporting purposes only\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty = 0 and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, both price and cost do not equal zero \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', round(-((x.unit_cost / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                          else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, price is zero but unit cost is not zero, margin is 0% on all lines \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                         else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost <> \\'0\\' and x.unit_price = \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, cost is zero but unit price is not zero, margin is 100% on all lines \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', \\'100\\' as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                          else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost = \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\n',",
						"     isolationLevel: 'READ_COMMITTED') ~> Transfer",
						"Transfer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'Transactions',",
						"     columnDelimiter: '|',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('Electro_Transaction_',toString(currentDate(), 'MM_dd_yyyy'), '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/To_Stock_Inventory_Report_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "Source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          vend_no as string,",
						"          po_no as integer,",
						"          lin_no as decimal(5,0),",
						"          item_no as string,",
						"          manu_no as string,",
						"          promise_dt as timestamp,",
						"          ship_asap as boolean,",
						"          unit_cost as decimal(19,5),",
						"          bal_of_ord as integer,",
						"          allocated as integer,",
						"          to_stock as integer,",
						"          value_to_stock as decimal(30,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select  po_hedr.vend_no, po_detl.po_no, po_Detl.lin_no, po_Detl.item_no, po_Detl.manu_no, po_detl.promise_dt, po_Detl.ship_asap, po_detl.unit_cost,  po_Detl.bal_of_ord, x.allocated as  \\'allocated\\', (po_detl.bal_of_ord - x.allocated) \\'to_stock\\', ((po_detl.bal_of_ord - x.allocated) * po_detl.unit_cost) \\'value_to_stock\\'\\nfrom po_detl\\njoin po_hedr on po_hedr.po_no = po_Detl.po_no and po_hedr.vend_no not like \\'%SHOP%\\'\\nleft join (select d.po_no, d.lin_no, sum(c.qty_allc) as \\'allocated\\'\\n                     from po_allc c\\n                     join po_Detl d on d.po_no = c.po_no and d.lin_no = c.lin_no\\n                     join po_hedr h on h.po_no = d.po_no\\n                     where d.status <> \\'V\\' and d.status <> \\'C\\' and h.status <> \\'C\\' and h.status <> \\'V\\' and d.bal_of_ord > \\'0\\'\\n                     group by d.po_no, d.lin_no) x on x.po_no = po_Detl.po_no and x.lin_no = po_detl.lin_no\\nwhere (x.allocated <> po_Detl.bal_of_ord) and bal_of_ord > 0 and po_hedr.vend_no <> \\'%SHOP%\\' and po_Detl.status <> \\'V\\' and po_Detl.status <> \\'C\\' \\ngroup by  po_hedr.vend_no, po_detl.po_no, po_Detl.lin_no, po_Detl.item_no, po_Detl.manu_no, po_detl.promise_dt, po_Detl.ship_asap, po_detl.unit_cost, po_Detl.bal_of_ord, x.allocated\\n\\n',",
						"     isolationLevel: 'READ_COMMITTED') ~> Source1",
						"Source1 sort(desc(value_to_stock, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'TyReport1',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['to-stock-inventory.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Data Flows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "EPDS01AROpen"
						},
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "EPDSAPOpen"
						},
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "EPDSPOOpen"
						},
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "WeeklyTRANSACTIONFile",
							"description": "Full Transaction files for Electro."
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "AROpen",
							"description": "AR Open Report"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "APOpen"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "POOpen"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "WeeklyTransactioNFileSink",
							"description": "place to put the weekly transactionf iles"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select c.cust_no \\'Customer ID\\', c.cust_name \\'Customer Name\\', case when ((r.amt > 0) and (c.terms_code is null or c.terms_code = \\'\\')) then s.code_desc else s2.code_desc end as \\'Terms\\', \\nr.doc_date \\'Invoice Date\\', r.due_date \\'Due Date\\', r.amt \\'Balance\\'\\nfrom aropen r\\nleft join customer c on c.cust_no = r.cust_no\\nleft join codes s on s.code_id = c.terms_code and s.code_type = \\'T\\'\\nleft join inv_hedr h on h.inv_no = r.doc_no\\nleft join codes s2 on s2.code_id = h.terms_code and s2.code_type = \\'T\\' \\nwhere r.doc_type = \\'I\\' and r.doc_no not like \\'UK%\\'\\ngroup by r.aropen_rec, c.cust_no, c.cust_name, case when ((r.amt > 0) and (c.terms_code is null or c.terms_code = \\'\\')) then s.code_desc else s2.code_desc end, \\nr.doc_date, r.due_date, r.amt\\nunion all\\nselect  c.cust_no \\'Customer ID\\', c.cust_name \\'Customer Name\\',\\'NULL\\' as \\'Terms\\', \\nr.doc_date \\'Invoice Date\\', r.due_date \\'Due Date\\', r.amt \\'Balance\\'\\nfrom aropen r\\nleft join customer c on c.cust_no = r.cust_no\\nwhere r.doc_type = \\'I\\' and r.doc_no like \\'UK%\\'\\ngroup by r.aropen_rec, c.cust_no, c.cust_name, \\nr.doc_date, r.due_date, r.amt\\nunion all\\nselect c.cust_no \\'Customer ID\\', c.cust_name \\'Customer Name\\',\\'NULL\\' as \\'Terms\\', \\nr.doc_date \\'Invoice Date\\', r.due_date \\'Due Date\\', r.amt \\'Balance\\'\\nfrom aropen r\\nleft join customer c on c.cust_no = r.cust_no\\nwhere r.doc_type <> \\'I\\'\\ngroup by r.aropen_rec, c.cust_no, c.cust_name, \\nr.doc_date, r.due_date, r.amt\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EPDS01AROpen",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select v.vend_no \\'Vendor ID\\', v.ap_name \\'Vendor Name\\', case when ((p.inv_amt > 0) and  (x.terms_code = \\'\\' or x.terms_code is null)) then t.code_desc else t2.code_desc end \\'Terms\\', p.invc_dt \\'Invoice Date\\', p.due_date \\'Due Date\\', p.inv_amt \\'Balance/Invoice Amount\\'\\nfrom apopen p\\nleft join aptrx x on x.voucher_no = p.voucher_no and x.reg_int_id = p.reg_int_id\\nleft join vendor v on v.vend_no = p.vend_no\\nleft join codes t on t.code_id = v.terms_code and t.code_type = \\'T\\'\\nleft join codes t2 on t2. code_id = x.terms_code and t2.code_type = \\'T\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EPDSAPOpen",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select h.vend_no \\'Vendor ID\\', v.ap_name \\'Vendor Name\\', t.code_desc \\'Terms\\', d.promise_dt \\'Ship/Invoice Date (Anticipated)\\', d.due_date \\'Due Date (Promised Date)\\', (d.bal_of_ord * d.unit_cost) \\'Remaining Amount (Cost)\\'\\nfrom po_detl d\\njoin po_hedr h on h.po_no = d.po_no\\njoin vendor v on v.vend_no = h.vend_no\\njoin codes t on t.code_id = h.terms_code and t.code_type = \\'T\\'\\nwhere h.status <> \\'V\\' and h.status <> \\'C\\' and h.status <> \\'C\\' and h.status <> \\'V\\' and d.bal_of_ord > 0 and h.shop_po = \\'N\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EPDSPOOpen",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: '/* Rev 1 - Set to look back at last 365 days.  Will be running weekly.  Only thing Revenue Analytics might want is unit cost and unit price.  TD 3-16-23\\n*/\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', round(-((x.unit_cost / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  \\n  x.trx_qty > 0 and x.ship_debit_amt = 0 and x.unit_cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Regular shipments (cost and resale are both greater than zero) with a ship and debit\\nselect  x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', ((x.unit_cost -(x.ship_debit_amt / x.trx_qty))  * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', round(-(((x.unit_cost - (x.ship_debit_amt / x.trx_Qty)) / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.ship_debit_amt <> 0 and x.unit_cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Shipment quantity is greater than zero, unit price is greater than zero, cost is zero, margin is 100% on all lines\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'100\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                         else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.unit_cost = \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and  x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Shipment quantity is greater than zero, unit price is zero, cost is greater than zero, margin is 0% on all lines\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.unit_cost > \\'0\\' and x.unit_price = \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion\\n-- Shipment quantity is zero, margin is 0% on all lines, for reporting purposes only\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty = 0 and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, both price and cost do not equal zero \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', round(-((x.unit_cost / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                          else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, price is zero but unit cost is not zero, margin is 0% on all lines \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                         else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost <> \\'0\\' and x.unit_price = \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, cost is zero but unit price is not zero, margin is 100% on all lines \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', \\'100\\' as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                          else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost = \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 365)) and ((getdate()))\\n',",
						"     isolationLevel: 'READ_COMMITTED') ~> WeeklyTRANSACTIONFile",
						"EPDS01AROpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'ARopen',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ARopen.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AROpen",
						"EPDSAPOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'APopen',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['APopen.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> APOpen",
						"EPDSPOOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'POopen',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['POopen.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> POOpen",
						"WeeklyTRANSACTIONFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'Transactions',",
						"     columnDelimiter: '|',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('Electro_Transaction_',toString(currentDate(), 'MM_dd_yyyy'), '.csv')\r",
						")],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> WeeklyTransactioNFileSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every other Week')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Every other Weekly Data Flow Runs",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Every other Week",
								"type": "DataFlowReference",
								"parameters": {
									"FileNAme": {
										"value": "'@{variables('Transact File Name')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Transfer": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ILSEE3",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Every other Weekly Data Flow Runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"FileName\":\"ILSEE3.txt\",\"EMailTo\":\"Ty.Diedrickelectroenterprises.com;choodcna-consulting.com\",\"EmailSubject\":\"Electro TRANSACTION Report\",\"PipeLineName\":\"Electro TRANSACTION Report\",\"FilePath\":\"/datafactoryfiles/Transaction/',variables('Transact File Name'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Transact File Name",
							"value": {
								"value": "@concat('Electro_Transaction_',formatDateTime(utcNow(),'MM_dd_yyyy'),'.csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Transact File Name": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Every other Week')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/To_Stock_Inventory_Report_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email Logic APP",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "To Stock Inventory Run",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "To-Stock-Inventory.csv",
								"EMailTo": "chood@cna-consulting.com;Ty.Diedrick@electroenterprises.com",
								"EmailSubject": "Report Testing V324",
								"PipeLineName": "ECIA_To_Text",
								"FilePath": "/datafactoryfiles/TyReport1/to-stock-inventory.csv"
							}
						}
					},
					{
						"name": "To Stock Inventory Run",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "To_Stock_Inventory_Report_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/To_Stock_Inventory_Report_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Reports')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Weekly Data Flow Runs",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Weekly Data Flows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EPDS01AROpen": {},
									"EPDSAPOpen": {},
									"EPDSPOOpen": {},
									"WeeklyTRANSACTIONFile": {},
									"AROpen": {},
									"APOpen": {},
									"POOpen": {},
									"WeeklyTransactioNFileSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ARopen",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Weekly Data Flow Runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "ARopen.csv",
								"EMailTo": "allen.hill@fdhaero.com;Ty.Diedrick@electroenterprises.com;Jennifer.smith@electroenterprises.com",
								"EmailSubject": "Electro AR Open Report",
								"PipeLineName": "Electro AR Open Report",
								"FilePath": "/datafactoryfiles/ARopen/ARopen.csv"
							}
						}
					},
					{
						"name": "APopen",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ARopen",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "APopen.csv",
								"EMailTo": "allen.hill@fdhaero.com;Ty.Diedrick@electroenterprises.com;Jennifer.smith@electroenterprises.com",
								"EmailSubject": "Electro AP Open Report",
								"PipeLineName": "Electro AP Open Report",
								"FilePath": "/datafactoryfiles/APopen/APopen.csv"
							}
						}
					},
					{
						"name": "POOpen",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "APopen",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "POopen.csv",
								"EMailTo": "allen.hill@fdhaero.com;Ty.Diedrick@electroenterprises.com;Jennifer.smith@electroenterprises.com",
								"EmailSubject": "Electro PO Open Report",
								"PipeLineName": "Electro PO Open Report",
								"FilePath": "/datafactoryfiles/POopen/POopen.csv"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Transact File Name": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Weekly Data Flows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every 1 Minute Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "WirelessWareHouse_Labels",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-12-01T17:37:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECIA_TO TEXT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "epdso1_ECIA_Table",
								"type": "DatasetReference"
							},
							"name": "PrimarySelect"
						},
						{
							"dataset": {
								"referenceName": "Pricing_Table_1",
								"type": "DatasetReference"
							},
							"name": "PricingTable1"
						},
						{
							"dataset": {
								"referenceName": "Pricing_Table_2",
								"type": "DatasetReference"
							},
							"name": "PricingTable2"
						},
						{
							"dataset": {
								"referenceName": "Pricing_Table_3",
								"type": "DatasetReference"
							},
							"name": "PricingTable3"
						},
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "ILSEE3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "ILSEE3out"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Sort1"
						}
					],
					"script": "source(output(\n\t\tlin_no as integer,\n\t\tout_text as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'NONE',\n\tformat: 'table') ~> PrimarySelect\nsource(output(\n\t\tmanufact as string,\n\t\tpart as string,\n\t\tweblink as string,\n\t\tqty as integer,\n\t\tdelivery as string,\n\t\toq1 as integer,\n\t\top1 as decimal(19,3),\n\t\toq2 as integer,\n\t\top2 as decimal(19,3),\n\t\toq3 as integer,\n\t\top3 as decimal(19,3),\n\t\toq4 as integer,\n\t\top4 as decimal(19,3),\n\t\toq5 as integer,\n\t\top5 as decimal(19,3),\n\t\toq6 as integer,\n\t\top6 as decimal(19,3),\n\t\toq7 as integer,\n\t\top7 as decimal(19,3),\n\t\toq8 as integer,\n\t\top8 as decimal(19,3),\n\t\toq9 as integer,\n\t\top9 as decimal(19,3),\n\t\toq10 as integer,\n\t\top10 as decimal(19,3),\n\t\toq11 as integer,\n\t\top11 as decimal(19,3),\n\t\tvdesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> PricingTable1\nsource(output(\n\t\tmanufact as string,\n\t\tpart as string,\n\t\tweblink as string,\n\t\tqty as integer,\n\t\tdelivery as string,\n\t\toq1 as integer,\n\t\top1 as decimal(19,3),\n\t\toq2 as integer,\n\t\top2 as decimal(19,3),\n\t\toq3 as integer,\n\t\top3 as decimal(19,3),\n\t\toq4 as integer,\n\t\top4 as decimal(19,3),\n\t\toq5 as integer,\n\t\top5 as decimal(19,3),\n\t\toq6 as integer,\n\t\top6 as decimal(19,3),\n\t\toq7 as integer,\n\t\top7 as decimal(19,3),\n\t\toq8 as integer,\n\t\top8 as decimal(19,3),\n\t\toq9 as integer,\n\t\top9 as decimal(19,3),\n\t\toq10 as integer,\n\t\top10 as decimal(19,3),\n\t\toq11 as integer,\n\t\top11 as decimal(19,3),\n\t\tvdesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> PricingTable2\nsource(output(\n\t\tmanufact as string,\n\t\tpart as string,\n\t\tweblink as string,\n\t\tqty as integer,\n\t\tdelivery as string,\n\t\toq1 as integer,\n\t\top1 as decimal(19,3),\n\t\toq2 as integer,\n\t\top2 as decimal(19,3),\n\t\toq3 as integer,\n\t\top3 as decimal(19,3),\n\t\toq4 as integer,\n\t\top4 as decimal(19,3),\n\t\toq5 as integer,\n\t\top5 as decimal(19,3),\n\t\toq6 as integer,\n\t\top6 as decimal(19,3),\n\t\toq7 as integer,\n\t\top7 as decimal(19,3),\n\t\toq8 as integer,\n\t\top8 as decimal(19,3),\n\t\toq9 as integer,\n\t\top9 as decimal(19,3),\n\t\toq10 as integer,\n\t\top10 as decimal(19,3),\n\t\toq11 as integer,\n\t\top11 as decimal(19,3),\n\t\tvdesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> PricingTable3\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'select part,vdesc,\\'NE\\' as NE ,sum(qty) AS SUM\\nfrom _Inventory_Export3\\nwhere delivery not like \\'%On Order%\\'\\ngroup by part, vdesc',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> ILSEE3\nSort1 select(mapColumn(\n\t\tout_text\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nPrimarySelect sort(asc(lin_no, true)) ~> Sort1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'ECIA',\n\tcolumnDelimiter: '',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: false,\n\tpartitionFileNames:['ECIAGlobalStandardRegion1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nPricingTable1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'PriceFiles',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['PricingLevel1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2\nPricingTable2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'PriceFiles',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['PricingLevel2.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink3\nPricingTable3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'PriceFiles',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['PricingLevel3.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink4\nILSEE3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\temptyLinesAsHeader: 1,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'ILSEE3',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['ILSEE3.txt'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tquoteAll: true,\n\tpartitionBy('hash', 1)) ~> ILSEE3out"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/epdso1_ECIA_Table')]",
				"[concat(variables('factoryId'), '/datasets/Pricing_Table_2')]",
				"[concat(variables('factoryId'), '/datasets/Pricing_Table_3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECIA Table Build and Export')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Run EPDS Exports",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ECIA_TO TEXT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PrimarySelect": {},
									"PricingTable1": {},
									"PricingTable2": {},
									"PricingTable3": {},
									"ILSEE3": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"ILSEE3out": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Copy data3",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data4",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "BlobFTP",
							"method": "GET",
							"headers": {}
						},
						"linkedServiceName": {
							"referenceName": "BlobtoFTPFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ILSEE3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobPricingLevel2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesFilesPricingLevel2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data3",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ILSEE3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobPricingLevel3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesFilesPricingLevel3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data4",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ILSEE3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobPricingLevel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesFilesPricingLevel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Run EPDS Exports",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('Run EPDS SQL')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "EE_INVENTORY_DUMP_copy1",
									"description": "This will process the Inventory and Dump it out to Database table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[_ee_inventory_dump_all]"
									},
									"linkedServiceName": {
										"referenceName": "TRO_Connect_epds01",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ecia_export_copy1",
									"description": "Runs the _ecia_export Command which builds out the Table used to Export",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EE_INVENTORY_DUMP_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[_ecia_export]"
									},
									"linkedServiceName": {
										"referenceName": "TRO_Connect_epds01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ILSEE3",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "ILSEE3.txt",
								"EMailTo": "alon@stealthaerospace.com;Solyman.Omar@fdhaero.com;Ty.Diedrick@electroenterprises.com;Nathan.Little@electroenterprises.com",
								"EmailSubject": "Electro ILSEE3 Report",
								"PipeLineName": "Electro ILSEE3 Report",
								"FilePath": "/datafactoryfiles/ILSEE3/ILSEE3.txt"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Run EPDS SQL": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ECIA_TO TEXT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Monthon15th')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "To_Stock_Inventory_Report_DF",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-04-18T20:39:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								1
							],
							"monthDays": [
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/To_Stock_Inventory_Report_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Reports saterday')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run the weekly reports and email them",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Weekly Reports",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-04-20T14:28:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"weekDays": [
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Weekly Reports')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Saterday 17pm')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Week",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ECIA Table Build and Export",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2021-09-12T19:14:00",
						"timeZone": "Central Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							],
							"weekDays": [
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ECIA Table Build and Export')]"
			]
		}
	]
}