{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ElectroFactory"
		},
		"Azure_WW_LABEL_COPY_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Azure_WW_LABEL_COPY'"
		},
		"Azure_WirelessWarehouse_Share_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Azure_WirelessWarehouse_Share'"
		},
		"SalesFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SalesFiles'"
		},
		"TRO_Connect_epds01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TRO_Connect_epds01'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tro-scus-prd-sql-1.public.00ba2bb543ff.database.windows.net,3342;Initial Catalog=epds01;User ID=epdsuser"
		},
		"Temp_Files_Locations_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Temp_Files_Locations'"
		},
		"Azure_WW_LABEL_COPY_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "waws-prod-sn1-171.ftp.azurewebsites.windows.net"
		},
		"Azure_WW_LABEL_COPY_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ElectroWebTools\\$ElectroWebTools"
		},
		"BlobtoFTPFunction_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://electro-automation-ps.azurewebsites.net"
		},
		"Electro_Key_Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ElectroKeyVault.vault.azure.net/"
		},
		"ftp_trustedparts_com_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "ftp.trustedparts.com"
		},
		"ftp_trustedparts_com_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "electro"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ECIA Table Build and Export')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Run EPDS Exports",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ECIA_TO TEXT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PrimarySelect": {},
									"PricingTable1": {},
									"PricingTable2": {},
									"PricingTable3": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Copy data3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "BlobFTP",
							"method": "GET",
							"headers": {}
						},
						"linkedServiceName": {
							"referenceName": "BlobtoFTPFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data4",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobPricingLevel2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesFilesPricingLevel2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data3",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobPricingLevel3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesFilesPricingLevel3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data4",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobPricingLevel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesFilesPricingLevel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Run EPDS Exports",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('Run EPDS SQL')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "EE_INVENTORY_DUMP_copy1",
									"description": "This will process the Inventory and Dump it out to Database table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[_ee_inventory_dump_all]"
									},
									"linkedServiceName": {
										"referenceName": "TRO_Connect_epds01",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ecia_export_copy1",
									"description": "Runs the _ecia_export Command which builds out the Table used to Export",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EE_INVENTORY_DUMP_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[_ecia_export]"
									},
									"linkedServiceName": {
										"referenceName": "TRO_Connect_epds01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Run EPDS SQL": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ECIA_TO TEXT')]",
				"[concat(variables('factoryId'), '/linkedServices/BlobtoFTPFunction')]",
				"[concat(variables('factoryId'), '/datasets/BlobPricingLevel2')]",
				"[concat(variables('factoryId'), '/datasets/SalesFilesPricingLevel2')]",
				"[concat(variables('factoryId'), '/datasets/BlobPricingLevel3')]",
				"[concat(variables('factoryId'), '/datasets/SalesFilesPricingLevel3')]",
				"[concat(variables('factoryId'), '/datasets/BlobPricingLevel1')]",
				"[concat(variables('factoryId'), '/datasets/SalesFilesPricingLevel1')]",
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/To_Stock_Inventory_Report_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email Logic APP",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "To Stock Inventory Run",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "To-Stock-Inventory.csv",
								"EMailTo": "chood@cna-consulting.com;Ty.Diedrick@electroenterprises.com",
								"EmailSubject": "Report Testing V324",
								"PipeLineName": "ECIA_To_Text",
								"FilePath": "/datafactoryfiles/TyReport1/to-stock-inventory.csv"
							}
						}
					},
					{
						"name": "To Stock Inventory Run",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "To_Stock_Inventory_Report_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/To_Stock_Inventory_Report_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Reports')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Weekly Data Flow Runs",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Weekly Data Flows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EPDS01AROpen": {},
									"EPDSAPOpen": {},
									"EPDSPOOpen": {},
									"AROpen": {},
									"APOpen": {},
									"POOpen": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ARopen",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Weekly Data Flow Runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "ARopen.csv",
								"EMailTo": "allen.hill@fdhaero.com;Ty.Diedrick@electroenterprises.com;Jennifer.smith@electroenterprises.com",
								"EmailSubject": "Electro AR Open Report",
								"PipeLineName": "Electro AR Open Report",
								"FilePath": "/datafactoryfiles/ARopen/ARopen.csv"
							}
						}
					},
					{
						"name": "APopen",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ARopen",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "APopen.csv",
								"EMailTo": "allen.hill@fdhaero.com;Ty.Diedrick@electroenterprises.com;Jennifer.smith@electroenterprises.com",
								"EmailSubject": "Electro AP Open Report",
								"PipeLineName": "Electro AP Open Report",
								"FilePath": "/datafactoryfiles/APopen/APopen.csv"
							}
						}
					},
					{
						"name": "POOpen",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "APopen",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "POopen.csv",
								"EMailTo": "allen.hill@fdhaero.com;Ty.Diedrick@electroenterprises.com;Jennifer.smith@electroenterprises.com",
								"EmailSubject": "Electro PO Open Report",
								"PipeLineName": "Electro PO Open Report",
								"FilePath": "/datafactoryfiles/POopen/POopen.csv"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Weekly Data Flows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WirelessWareHouse_Labels')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_u7h",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "site/wwwroot/labels/"
							},
							{
								"name": "Destination",
								"value": "/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"useBinaryTransfer": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							}
						},
						"inputs": [
							{
								"referenceName": "WirelessWareHouse_FTP_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_Wireless_WareHouse_Share",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WirelessWareHouse_FTP_Source')]",
				"[concat(variables('factoryId'), '/datasets/Azure_Wireless_WareHouse_Share')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_Wireless_WareHouse_Share')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azure_WirelessWarehouse_Share",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Azure_WirelessWarehouse_Share')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobPricingLevel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Temp_Files_Locations",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PricingLevel1.csv",
						"folderPath": "PriceFiles",
						"container": "datafactoryfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "manufact",
						"type": "String"
					},
					{
						"name": "part",
						"type": "String"
					},
					{
						"name": "weblink",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					},
					{
						"name": "delivery",
						"type": "String"
					},
					{
						"name": "oq1",
						"type": "String"
					},
					{
						"name": "op1",
						"type": "String"
					},
					{
						"name": "oq2",
						"type": "String"
					},
					{
						"name": "op2",
						"type": "String"
					},
					{
						"name": "oq3",
						"type": "String"
					},
					{
						"name": "op3",
						"type": "String"
					},
					{
						"name": "oq4",
						"type": "String"
					},
					{
						"name": "op4",
						"type": "String"
					},
					{
						"name": "oq5",
						"type": "String"
					},
					{
						"name": "op5",
						"type": "String"
					},
					{
						"name": "oq6",
						"type": "String"
					},
					{
						"name": "op6",
						"type": "String"
					},
					{
						"name": "oq7",
						"type": "String"
					},
					{
						"name": "op7",
						"type": "String"
					},
					{
						"name": "oq8",
						"type": "String"
					},
					{
						"name": "op8",
						"type": "String"
					},
					{
						"name": "oq9",
						"type": "String"
					},
					{
						"name": "op9",
						"type": "String"
					},
					{
						"name": "oq10",
						"type": "String"
					},
					{
						"name": "op10",
						"type": "String"
					},
					{
						"name": "oq11",
						"type": "String"
					},
					{
						"name": "op11",
						"type": "String"
					},
					{
						"name": "vdesc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobPricingLevel2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Temp_Files_Locations",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PricingLevel2.csv",
						"folderPath": "PriceFiles",
						"container": "datafactoryfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "manufact",
						"type": "String"
					},
					{
						"name": "part",
						"type": "String"
					},
					{
						"name": "weblink",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					},
					{
						"name": "delivery",
						"type": "String"
					},
					{
						"name": "oq1",
						"type": "String"
					},
					{
						"name": "op1",
						"type": "String"
					},
					{
						"name": "oq2",
						"type": "String"
					},
					{
						"name": "op2",
						"type": "String"
					},
					{
						"name": "oq3",
						"type": "String"
					},
					{
						"name": "op3",
						"type": "String"
					},
					{
						"name": "oq4",
						"type": "String"
					},
					{
						"name": "op4",
						"type": "String"
					},
					{
						"name": "oq5",
						"type": "String"
					},
					{
						"name": "op5",
						"type": "String"
					},
					{
						"name": "oq6",
						"type": "String"
					},
					{
						"name": "op6",
						"type": "String"
					},
					{
						"name": "oq7",
						"type": "String"
					},
					{
						"name": "op7",
						"type": "String"
					},
					{
						"name": "oq8",
						"type": "String"
					},
					{
						"name": "op8",
						"type": "String"
					},
					{
						"name": "oq9",
						"type": "String"
					},
					{
						"name": "op9",
						"type": "String"
					},
					{
						"name": "oq10",
						"type": "String"
					},
					{
						"name": "op10",
						"type": "String"
					},
					{
						"name": "oq11",
						"type": "String"
					},
					{
						"name": "op11",
						"type": "String"
					},
					{
						"name": "vdesc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobPricingLevel3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Temp_Files_Locations",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PricingLevel3.csv",
						"folderPath": "PriceFiles",
						"container": "datafactoryfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "manufact",
						"type": "String"
					},
					{
						"name": "part",
						"type": "String"
					},
					{
						"name": "weblink",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					},
					{
						"name": "delivery",
						"type": "String"
					},
					{
						"name": "oq1",
						"type": "String"
					},
					{
						"name": "op1",
						"type": "String"
					},
					{
						"name": "oq2",
						"type": "String"
					},
					{
						"name": "op2",
						"type": "String"
					},
					{
						"name": "oq3",
						"type": "String"
					},
					{
						"name": "op3",
						"type": "String"
					},
					{
						"name": "oq4",
						"type": "String"
					},
					{
						"name": "op4",
						"type": "String"
					},
					{
						"name": "oq5",
						"type": "String"
					},
					{
						"name": "op5",
						"type": "String"
					},
					{
						"name": "oq6",
						"type": "String"
					},
					{
						"name": "op6",
						"type": "String"
					},
					{
						"name": "oq7",
						"type": "String"
					},
					{
						"name": "op7",
						"type": "String"
					},
					{
						"name": "oq8",
						"type": "String"
					},
					{
						"name": "op8",
						"type": "String"
					},
					{
						"name": "oq9",
						"type": "String"
					},
					{
						"name": "op9",
						"type": "String"
					},
					{
						"name": "oq10",
						"type": "String"
					},
					{
						"name": "op10",
						"type": "String"
					},
					{
						"name": "oq11",
						"type": "String"
					},
					{
						"name": "op11",
						"type": "String"
					},
					{
						"name": "vdesc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pricing_Table_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "manufact",
						"type": "varchar"
					},
					{
						"name": "part",
						"type": "varchar"
					},
					{
						"name": "weblink",
						"type": "varchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "delivery",
						"type": "varchar"
					},
					{
						"name": "oq1",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op1",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq2",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op2",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq3",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op3",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq4",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op4",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq5",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op5",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq6",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op6",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq7",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op7",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq8",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op8",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq9",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op9",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq10",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op10",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq11",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op11",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "vdesc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_Inventory_Export1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pricing_Table_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "manufact",
						"type": "varchar"
					},
					{
						"name": "part",
						"type": "varchar"
					},
					{
						"name": "weblink",
						"type": "varchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "delivery",
						"type": "varchar"
					},
					{
						"name": "oq1",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op1",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq2",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op2",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq3",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op3",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq4",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op4",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq5",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op5",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq6",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op6",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq7",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op7",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq8",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op8",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq9",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op9",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq10",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op10",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq11",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op11",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "vdesc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_Inventory_Export2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pricing_Table_3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "manufact",
						"type": "varchar"
					},
					{
						"name": "part",
						"type": "varchar"
					},
					{
						"name": "weblink",
						"type": "varchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "delivery",
						"type": "varchar"
					},
					{
						"name": "oq1",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op1",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq2",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op2",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq3",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op3",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq4",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op4",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq5",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op5",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq6",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op6",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq7",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op7",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq8",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op8",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq9",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op9",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq10",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op10",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "oq11",
						"type": "int",
						"precision": 10
					},
					{
						"name": "op11",
						"type": "decimal",
						"precision": 19,
						"scale": 3
					},
					{
						"name": "vdesc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_Inventory_Export3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesFilesPricingLevel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SalesFiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@concat(replace('PricingLevel1.csv','.csv',''), '_', formatDateTime(convertTimeZone(utcnow(),'UTC','Eastern Standard Time'),'yyyy-MM-ddTHHmmss'), '.csv')",
							"type": "Expression"
						},
						"folderPath": "Inventory Export"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SalesFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesFilesPricingLevel2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SalesFiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@concat(replace('PricingLevel2.csv','.csv',''), '_', formatDateTime(convertTimeZone(utcnow(),'UTC','Eastern Standard Time'),'yyyy-MM-ddTHHmmss'), '.csv')",
							"type": "Expression"
						},
						"folderPath": "Inventory Export"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SalesFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesFilesPricingLevel3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SalesFiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@concat(replace('PricingLevel3.csv','.csv',''), '_', formatDateTime(convertTimeZone(utcnow(),'UTC','Eastern Standard Time'),'yyyy-MM-ddTHHmmss'), '.csv')",
							"type": "Expression"
						},
						"folderPath": "Inventory Export"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SalesFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/To_stock_inventory_report_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Temp_Files_Locations",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "to-stock-inventory.csv",
						"folderPath": "TyReport1",
						"container": "datafactoryfiles"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WirelessWareHouse_FTP_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azure_WW_LABEL_COPY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": "site/wwwroot/labels"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Azure_WW_LABEL_COPY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/epdso1_ECIA_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TRO_Connect_epds01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "lin_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "out_text",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "_ecia_global_standard_region"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_WW_LABEL_COPY')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('Azure_WW_LABEL_COPY_properties_typeProperties_host')]",
					"port": 21,
					"enableSsl": true,
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Azure_WW_LABEL_COPY_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Azure_WW_LABEL_COPY_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_WirelessWarehouse_Share')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('Azure_WirelessWarehouse_Share_connectionString')]",
					"fileShare": "epds-ww-files"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobtoFTPFunction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('BlobtoFTPFunction_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Electro_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "BlobtoFTP"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Electro_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Electro_Key_Vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Electro_Key_Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('SalesFiles_connectionString')]",
					"fileShare": "salesshare"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRO_Connect_epds01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"connectionString": "[parameters('TRO_Connect_epds01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Electro_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "epdsuser"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Electro_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Temp_Files_Locations')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Temp Place to Put Delimited Files before FTP off to other locations",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Temp_Files_Locations_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ftp_trustedparts_com')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ftp.trustedparts.com",
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('ftp_trustedparts_com_properties_typeProperties_host')]",
					"port": 21,
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('ftp_trustedparts_com_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Electro_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "ftptrustedpartscom",
						"secretVersion": ""
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Electro_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every 1 Minute Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "WirelessWareHouse_Labels",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-12-01T17:37:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/WirelessWareHouse_Labels')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Monthon15th')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "To_Stock_Inventory_Report_DF",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-04-18T20:39:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								1
							],
							"monthDays": [
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/To_Stock_Inventory_Report_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Reports saterday')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run the weekly reports and email them",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Weekly Reports",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-04-20T14:28:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"weekDays": [
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Weekly Reports')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Saterday 17pm')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Week",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ECIA Table Build and Export",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2021-09-12T19:14:00",
						"timeZone": "Central Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							],
							"weekDays": [
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ECIA Table Build and Export')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECIA_TO TEXT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "epdso1_ECIA_Table",
								"type": "DatasetReference"
							},
							"name": "PrimarySelect"
						},
						{
							"dataset": {
								"referenceName": "Pricing_Table_1",
								"type": "DatasetReference"
							},
							"name": "PricingTable1"
						},
						{
							"dataset": {
								"referenceName": "Pricing_Table_2",
								"type": "DatasetReference"
							},
							"name": "PricingTable2"
						},
						{
							"dataset": {
								"referenceName": "Pricing_Table_3",
								"type": "DatasetReference"
							},
							"name": "PricingTable3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Sort1"
						}
					],
					"script": "source(output(\n\t\tlin_no as integer,\n\t\tout_text as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'NONE',\n\tformat: 'table') ~> PrimarySelect\nsource(output(\n\t\tmanufact as string,\n\t\tpart as string,\n\t\tweblink as string,\n\t\tqty as integer,\n\t\tdelivery as string,\n\t\toq1 as integer,\n\t\top1 as decimal(19,3),\n\t\toq2 as integer,\n\t\top2 as decimal(19,3),\n\t\toq3 as integer,\n\t\top3 as decimal(19,3),\n\t\toq4 as integer,\n\t\top4 as decimal(19,3),\n\t\toq5 as integer,\n\t\top5 as decimal(19,3),\n\t\toq6 as integer,\n\t\top6 as decimal(19,3),\n\t\toq7 as integer,\n\t\top7 as decimal(19,3),\n\t\toq8 as integer,\n\t\top8 as decimal(19,3),\n\t\toq9 as integer,\n\t\top9 as decimal(19,3),\n\t\toq10 as integer,\n\t\top10 as decimal(19,3),\n\t\toq11 as integer,\n\t\top11 as decimal(19,3),\n\t\tvdesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> PricingTable1\nsource(output(\n\t\tmanufact as string,\n\t\tpart as string,\n\t\tweblink as string,\n\t\tqty as integer,\n\t\tdelivery as string,\n\t\toq1 as integer,\n\t\top1 as decimal(19,3),\n\t\toq2 as integer,\n\t\top2 as decimal(19,3),\n\t\toq3 as integer,\n\t\top3 as decimal(19,3),\n\t\toq4 as integer,\n\t\top4 as decimal(19,3),\n\t\toq5 as integer,\n\t\top5 as decimal(19,3),\n\t\toq6 as integer,\n\t\top6 as decimal(19,3),\n\t\toq7 as integer,\n\t\top7 as decimal(19,3),\n\t\toq8 as integer,\n\t\top8 as decimal(19,3),\n\t\toq9 as integer,\n\t\top9 as decimal(19,3),\n\t\toq10 as integer,\n\t\top10 as decimal(19,3),\n\t\toq11 as integer,\n\t\top11 as decimal(19,3),\n\t\tvdesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> PricingTable2\nsource(output(\n\t\tmanufact as string,\n\t\tpart as string,\n\t\tweblink as string,\n\t\tqty as integer,\n\t\tdelivery as string,\n\t\toq1 as integer,\n\t\top1 as decimal(19,3),\n\t\toq2 as integer,\n\t\top2 as decimal(19,3),\n\t\toq3 as integer,\n\t\top3 as decimal(19,3),\n\t\toq4 as integer,\n\t\top4 as decimal(19,3),\n\t\toq5 as integer,\n\t\top5 as decimal(19,3),\n\t\toq6 as integer,\n\t\top6 as decimal(19,3),\n\t\toq7 as integer,\n\t\top7 as decimal(19,3),\n\t\toq8 as integer,\n\t\top8 as decimal(19,3),\n\t\toq9 as integer,\n\t\top9 as decimal(19,3),\n\t\toq10 as integer,\n\t\top10 as decimal(19,3),\n\t\toq11 as integer,\n\t\top11 as decimal(19,3),\n\t\tvdesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> PricingTable3\nSort1 select(mapColumn(\n\t\tout_text\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nPrimarySelect sort(asc(lin_no, true)) ~> Sort1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'ECIA',\n\tcolumnDelimiter: '',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: false,\n\tpartitionFileNames:['ECIAGlobalStandardRegion1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nPricingTable1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'PriceFiles',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['PricingLevel1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2\nPricingTable2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'PriceFiles',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['PricingLevel2.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink3\nPricingTable3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'datafactoryfiles',\n\tfolderPath: 'PriceFiles',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['PricingLevel3.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink4"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/epdso1_ECIA_Table')]",
				"[concat(variables('factoryId'), '/datasets/Pricing_Table_1')]",
				"[concat(variables('factoryId'), '/datasets/Pricing_Table_2')]",
				"[concat(variables('factoryId'), '/datasets/Pricing_Table_3')]",
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/To_Stock_Inventory_Report_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "Source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          vend_no as string,",
						"          po_no as integer,",
						"          lin_no as decimal(5,0),",
						"          item_no as string,",
						"          manu_no as string,",
						"          promise_dt as timestamp,",
						"          ship_asap as boolean,",
						"          unit_cost as decimal(19,5),",
						"          bal_of_ord as integer,",
						"          allocated as integer,",
						"          to_stock as integer,",
						"          value_to_stock as decimal(30,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select  po_hedr.vend_no, po_detl.po_no, po_Detl.lin_no, po_Detl.item_no, po_Detl.manu_no, po_detl.promise_dt, po_Detl.ship_asap, po_detl.unit_cost,  po_Detl.bal_of_ord, x.allocated as  \\'allocated\\', (po_detl.bal_of_ord - x.allocated) \\'to_stock\\', ((po_detl.bal_of_ord - x.allocated) * po_detl.unit_cost) \\'value_to_stock\\'\\nfrom po_detl\\njoin po_hedr on po_hedr.po_no = po_Detl.po_no and po_hedr.vend_no not like \\'%SHOP%\\'\\nleft join (select d.po_no, d.lin_no, sum(c.qty_allc) as \\'allocated\\'\\n                     from po_allc c\\n                     join po_Detl d on d.po_no = c.po_no and d.lin_no = c.lin_no\\n                     join po_hedr h on h.po_no = d.po_no\\n                     where d.status <> \\'V\\' and d.status <> \\'C\\' and h.status <> \\'C\\' and h.status <> \\'V\\' and d.bal_of_ord > \\'0\\'\\n                     group by d.po_no, d.lin_no) x on x.po_no = po_Detl.po_no and x.lin_no = po_detl.lin_no\\nwhere (x.allocated <> po_Detl.bal_of_ord) and bal_of_ord > 0 and po_hedr.vend_no <> \\'%SHOP%\\' and po_Detl.status <> \\'V\\' and po_Detl.status <> \\'C\\' \\ngroup by  po_hedr.vend_no, po_detl.po_no, po_Detl.lin_no, po_Detl.item_no, po_Detl.manu_no, po_detl.promise_dt, po_Detl.ship_asap, po_detl.unit_cost, po_Detl.bal_of_ord, x.allocated\\n\\n',",
						"     isolationLevel: 'READ_COMMITTED') ~> Source1",
						"Source1 sort(desc(value_to_stock, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'TyReport1',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['to-stock-inventory.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]",
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weekly Data Flows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "EPDS01AROpen"
						},
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "EPDSAPOpen"
						},
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "EPDSPOOpen"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "AROpen",
							"description": "AR Open Report"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "APOpen"
						},
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "POOpen"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select c.cust_no \\'Customer ID\\', c.cust_name \\'Customer Name\\', case when ((r.amt > 0) and (c.terms_code is null or c.terms_code = \\'\\')) then s.code_desc else s2.code_desc end as \\'Terms\\', \\nr.doc_date \\'Invoice Date\\', r.due_date \\'Due Date\\', r.amt \\'Balance\\'\\nfrom aropen r\\nleft join customer c on c.cust_no = r.cust_no\\nleft join codes s on s.code_id = c.terms_code and s.code_type = \\'T\\'\\nleft join inv_hedr h on h.inv_no = r.doc_no\\nleft join codes s2 on s2.code_id = h.terms_code and s2.code_type = \\'T\\' \\nwhere r.doc_type = \\'I\\' and r.doc_no not like \\'UK%\\'\\ngroup by r.aropen_rec, c.cust_no, c.cust_name, case when ((r.amt > 0) and (c.terms_code is null or c.terms_code = \\'\\')) then s.code_desc else s2.code_desc end, \\nr.doc_date, r.due_date, r.amt\\nunion all\\nselect  c.cust_no \\'Customer ID\\', c.cust_name \\'Customer Name\\',\\'NULL\\' as \\'Terms\\', \\nr.doc_date \\'Invoice Date\\', r.due_date \\'Due Date\\', r.amt \\'Balance\\'\\nfrom aropen r\\nleft join customer c on c.cust_no = r.cust_no\\nwhere r.doc_type = \\'I\\' and r.doc_no like \\'UK%\\'\\ngroup by r.aropen_rec, c.cust_no, c.cust_name, \\nr.doc_date, r.due_date, r.amt\\nunion all\\nselect c.cust_no \\'Customer ID\\', c.cust_name \\'Customer Name\\',\\'NULL\\' as \\'Terms\\', \\nr.doc_date \\'Invoice Date\\', r.due_date \\'Due Date\\', r.amt \\'Balance\\'\\nfrom aropen r\\nleft join customer c on c.cust_no = r.cust_no\\nwhere r.doc_type <> \\'I\\'\\ngroup by r.aropen_rec, c.cust_no, c.cust_name, \\nr.doc_date, r.due_date, r.amt\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EPDS01AROpen",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select v.vend_no \\'Vendor ID\\', v.ap_name \\'Vendor Name\\', case when ((p.inv_amt > 0) and  (x.terms_code = \\'\\' or x.terms_code is null)) then t.code_desc else t2.code_desc end \\'Terms\\', p.invc_dt \\'Invoice Date\\', p.due_date \\'Due Date\\', p.inv_amt \\'Balance/Invoice Amount\\'\\nfrom apopen p\\nleft join aptrx x on x.voucher_no = p.voucher_no and x.reg_int_id = p.reg_int_id\\nleft join vendor v on v.vend_no = p.vend_no\\nleft join codes t on t.code_id = v.terms_code and t.code_type = \\'T\\'\\nleft join codes t2 on t2. code_id = x.terms_code and t2.code_type = \\'T\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EPDSAPOpen",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select h.vend_no \\'Vendor ID\\', v.ap_name \\'Vendor Name\\', t.code_desc \\'Terms\\', d.promise_dt \\'Ship/Invoice Date (Anticipated)\\', d.due_date \\'Due Date (Promised Date)\\', (d.bal_of_ord * d.unit_cost) \\'Remaining Amount (Cost)\\'\\nfrom po_detl d\\njoin po_hedr h on h.po_no = d.po_no\\njoin vendor v on v.vend_no = h.vend_no\\njoin codes t on t.code_id = h.terms_code and t.code_type = \\'T\\'\\nwhere h.status <> \\'V\\' and h.status <> \\'C\\' and h.status <> \\'C\\' and h.status <> \\'V\\' and d.bal_of_ord > 0 and h.shop_po = \\'N\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EPDSPOOpen",
						"EPDS01AROpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'ARopen',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ARopen.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AROpen",
						"EPDSAPOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'APopen',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['APopen.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> APOpen",
						"EPDSPOOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'POopen',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['POopen.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> POOpen"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]",
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every other Week')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "TRO_Connect_epds01",
								"type": "LinkedServiceReference"
							},
							"name": "ILSEE3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Temp_Files_Locations",
								"type": "LinkedServiceReference"
							},
							"name": "ILSEE3output"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select part,vdesc,\\'NE\\' as NE ,sum(qty) AS SUM\\nfrom _Inventory_Export3\\nwhere delivery not like \\'%On Order%\\'\\ngroup by part, vdesc',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ILSEE3",
						"ILSEE3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     emptyLinesAsHeader: 1,",
						"     format: 'delimited',",
						"     container: 'datafactoryfiles',",
						"     folderPath: 'ILSEE3',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['ILSEE3.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> ILSEE3output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TRO_Connect_epds01')]",
				"[concat(variables('factoryId'), '/linkedServices/Temp_Files_Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every other Week')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Every other Weekly Data Flow Runs",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Every other Week",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ILSEE3": {},
									"ILSEE3output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ILSEE3",
						"description": "Send an email thought Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Every other Weekly Data Flow Runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.southcentralus.logic.azure.com:443/workflows/d0e22226ef054a3b89f6fae46761781c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BOGZ5JNwLp-jnUGcklAj12xMaN9Y8r2RO-n0bQ3Yy5U",
							"method": "POST",
							"headers": {},
							"body": {
								"FileName": "ILSEE3.txt",
								"EMailTo": "chood@cna-consulting.com;Ty.Diedrick@electroenterprises.com",
								"EmailSubject": "Electro ILSEE3 Report",
								"PipeLineName": "Electro ILSEE3 Report",
								"FilePath": "/datafactoryfiles/ILSEE3/ILSEE3.txt"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Every other Week')]"
			]
		}
	]
}