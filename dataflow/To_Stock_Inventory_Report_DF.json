{
	"name": "To_Stock_Inventory_Report_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "Source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          vend_no as string,",
				"          po_no as integer,",
				"          lin_no as decimal(5,0),",
				"          item_no as string,",
				"          manu_no as string,",
				"          promise_dt as timestamp,",
				"          ship_asap as boolean,",
				"          unit_cost as decimal(19,5),",
				"          bal_of_ord as integer,",
				"          allocated as integer,",
				"          to_stock as integer,",
				"          value_to_stock as decimal(30,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select  po_hedr.vend_no, po_detl.po_no, po_Detl.lin_no, po_Detl.item_no, po_Detl.manu_no, po_detl.promise_dt, po_Detl.ship_asap, po_detl.unit_cost,  po_Detl.bal_of_ord, x.allocated as  \\'allocated\\', (po_detl.bal_of_ord - x.allocated) \\'to_stock\\', ((po_detl.bal_of_ord - x.allocated) * po_detl.unit_cost) \\'value_to_stock\\'\\nfrom po_detl\\njoin po_hedr on po_hedr.po_no = po_Detl.po_no and po_hedr.vend_no not like \\'%SHOP%\\'\\nleft join (select d.po_no, d.lin_no, sum(c.qty_allc) as \\'allocated\\'\\n                     from po_allc c\\n                     join po_Detl d on d.po_no = c.po_no and d.lin_no = c.lin_no\\n                     join po_hedr h on h.po_no = d.po_no\\n                     where d.status <> \\'V\\' and d.status <> \\'C\\' and h.status <> \\'C\\' and h.status <> \\'V\\' and d.bal_of_ord > \\'0\\'\\n                     group by d.po_no, d.lin_no) x on x.po_no = po_Detl.po_no and x.lin_no = po_detl.lin_no\\nwhere (x.allocated <> po_Detl.bal_of_ord) and bal_of_ord > 0 and po_hedr.vend_no <> \\'%SHOP%\\' and po_Detl.status <> \\'V\\' and po_Detl.status <> \\'C\\' \\ngroup by  po_hedr.vend_no, po_detl.po_no, po_Detl.lin_no, po_Detl.item_no, po_Detl.manu_no, po_detl.promise_dt, po_Detl.ship_asap, po_detl.unit_cost, po_Detl.bal_of_ord, x.allocated\\n\\n',",
				"     isolationLevel: 'READ_COMMITTED') ~> Source1",
				"Source1 sort(desc(value_to_stock, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'TyReport1',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['to-stock-inventory.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}