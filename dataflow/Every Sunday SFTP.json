{
	"name": "Every Sunday SFTP",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "Transfer"
				},
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "ItemFile"
				},
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerFile"
				},
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "StockingFile"
				},
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "InventoryFile"
				},
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "EndFIle"
				},
				{
					"linkedService": {
						"referenceName": "TRO_Connect_epds01",
						"type": "LinkedServiceReference"
					},
					"name": "ProcurementInfoEmail"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "TransferFile"
				},
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "ItemFileOut"
				},
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerFileOut"
				},
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "StockingFileOut"
				},
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "InventoryFileOut"
				},
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "Temp_Files_Locations",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "OrderByItemNO"
				}
			],
			"scriptLines": [
				"parameters{",
				"     transfile as string ('Electro_Transaction_05_16_2023.csv'),",
				"     itemfile as string ('Electro_ITEM_MASTER_05_16_2023.csv'),",
				"     customerfile as string ('Electro_CUSTOMER_MASTER_05_16_2023.csv'),",
				"     stockingfile as string ('Electro_STOCKING_ITEMS_05_16_2023.csv'),",
				"     invfile as string ('Electro_INVENTORY_05_16_2023.csv'),",
				"     status as string ('ELECTRO_05_16_2023_status.csv')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: '/* Rev 1 - Set to look back at last 365 days.  Will be running weekly.  Only thing Revenue Analytics might want is unit cost and unit price.  TD 3-16-23\\n   Rev 2 - After first set of results we agreed to add book date and web order flag to the data.  Also now only looking back 7 days.  TD 5-22-23\\n*/\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\',\\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', round(-((x.unit_cost / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no \\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  \\n  x.trx_qty > 0 and x.ship_debit_amt = 0 and x.unit_cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion\\n-- Regular shipments (cost and resale are both greater than zero) with a ship and debit\\nselect  x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', ((x.unit_cost -(x.ship_debit_amt / x.trx_qty))  * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', round(-(((x.unit_cost - (x.ship_debit_amt / x.trx_Qty)) / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.ship_debit_amt <> 0 and x.unit_cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion\\n-- Shipment quantity is greater than zero, unit price is greater than zero, cost is zero, margin is 100% on all lines\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'100\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                         else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.unit_cost = \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and  x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion\\n-- Shipment quantity is greater than zero, unit price is zero, cost is greater than zero, margin is 0% on all lines\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\njoin shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty > 0 and x.unit_cost > \\'0\\' and x.unit_price = \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion\\n-- Shipment quantity is zero, margin is 0% on all lines, for reporting purposes only\\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.trx_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.trx_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\', \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                           else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.trx_qty = 0 and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, both price and cost do not equal zero \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', round(-((x.unit_cost / x.unit_price) -1),2) as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                          else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost <> \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, price is zero but unit cost is not zero, margin is 0% on all lines \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', \\'0\\' as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                         else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost <> \\'0\\' and x.unit_price = \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\nunion \\n-- Credit where order quantity is less than zero, cost is zero but unit price is not zero, margin is 100% on all lines \\nselect x.inv_trx_rec \\'Inventory Transaction Record\\', x.order_no \\'Order Number\\', x.lin_no \\'Order Line\\', \\n                                   case when h4.create_id = \\'WEB\\' then \\'Y\\' else \\'N\\' end as \\'Web Order\\',\\nl8.book_dt \\'Book Date\\', x.trx_date \\'Invoice Date\\', c.cust_name as \\'Customer Name\\', c.cust_no as \\'Customer Number\\',\\n                            case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                              when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                              when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                              when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                              when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                              when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                         when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                       else \\'Other\\' \\n                                                       end as \\'Customer Classification\\',\\ns5.slsman_nam \\'Salesman\\',  case when  h4.ord_type = \\'C\\' then \\'Credit Order\\' else \\'Sales Order\\' end as \\'Order Type\\',  x.item_no as \\'SKU\\', x.manu_no as \\'Manu No\\', x.vend_no as \\'Vend No\\', s.code_desc as \\'Product Type\\', \\n                                               case when d6.pkg_label = \\'NONE\\' then i.uom\\n                                                                when d6.pkg_label = \\'\\' then i.uom\\n                                                                  else d6.pkg_label end as \\'Ship UOM\\'\\n                                                , h.st_city as \\'Ship-to City\\', h.st_state as \\'Ship-to State\\', h.st_cntry as \\'Ship-to Country\\',\\'Electro\\' as \\'Business line\\', x.trx_qty \\'Transaction Quantity\\', (x.unit_cost * x.ord_qty) as \\'Extended Inventory Cost\\', (x.unit_price * x.ord_Qty) as \\'Extended Resale\\', \\'100\\' as \\'Margin\\',  \\'USD\\' as \\'Currency\\', case\\n                           when y.item_no is NULL then \\'Ad-hoc\\'\\n                           else \\'LTA\\'\\n                           end as \\'LTA vs. Ad-hoc\\', case\\n                           when w.stk_item = \\'Y\\' then \\'Stocking\\'\\n                           when x.vend_no like \\'%SHOP%\\' then \\'Resale\\'\\n                           else \\'Purchasing\\'\\n                           end as \\'Inventory type\\',case\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no <> \\'ELEENT\\' then \\'Value-Add Connector\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat = \\'CAB\\' then \\'Cable Assembly\\'\\n                           when x.vend_no like \\'%SHOP%\\' and x.manu_no = \\'ELEENT\\' and i.prod_cat <> \\'CAB\\' then \\'Other Value-Add Assembly\\'\\n                          else \\'Non-VA\\'\\n                           end \\'Distribution Type\\'\\nfrom inv_trx x\\njoin ord_Detl d6 on d6.order_no = x.order_no and d6.lin_no = x.lin_no\\nleft join (select l.order_no, l.lin_no, min(l.log_date) \\'book_dt\\'\\n          from ord_log l\\n          group by l.order_no, l.lin_no) l8 on l8.order_no = d6.order_no and l8.lin_no = d6.lin_no\\njoin ord_hedr h4 on h4.order_no = x.order_no\\njoin slsman s5 on s5.slsman_no = x.slsman_1 \\njoin customer c on c.cust_no = x.cust_no\\njoin item i on i.item_no = x.item_no and i.manu_no = x.manu_no\\njoin codes s on s.code_id = i.prod_cat and s.code_type = \\'P\\'\\nleft join shp_hedr h on h.ship_no = x.ship_no\\nleft join (select  distinct (d.item_no+d.manu_no+h.cust_no) as \\'contract_identifier\\', h.cust_no, d.item_no, d.manu_no\\n               from ord_detl d\\n                     join ord_hedr h on h.order_no = d.order_no and h.ord_type = \\'N\\'\\n                     where d.status <> \\'V\\' and h.status <> \\'V\\') y on y.cust_no = x.cust_no and y.manu_no = x.manu_no and y.item_no = x.item_no\\nleft join (select distinct (w.item_no+w.manu_no) as \\'stocking_identifier\\', w.item_no, w.manu_no, w.stk_item\\n                     from itm_whse w\\n                     where w.stk_item = \\'Y\\') w on w.item_no = x.item_no and w.manu_no = x.manu_no\\nwhere  x.ord_qty < 0 and x.unit_Cost = \\'0\\' and x.unit_price <> \\'0\\' and x.trx_type = \\'S\\' and x.cust_no not like \\'%SHOP%\\' and x.trx_date between ((getdate() - 7)) and ((getdate()))\\n',",
				"     isolationLevel: 'READ_COMMITTED') ~> Transfer",
				"source(output(",
				"          SKU as string,",
				"          {Manu No} as string,",
				"          {Item Description} as string,",
				"          {Product Category} as string,",
				"          {Product Category Description} as string,",
				"          {Price Category} as string,",
				"          UOM as string,",
				"          {Landed Average Cost} as decimal(14,5),",
				"          {Last Cost} as decimal(14,5),",
				"          {New Cost} as decimal(14,5),",
				"          {On Order Cost} as decimal(19,5),",
				"          {Last Sold} as timestamp,",
				"          {Last Received} as timestamp,",
				"          {Mandatory Notes} as string,",
				"          Inactive as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select i.item_no \\'SKU\\', i.manu_no \\'Manu No\\', i.item_desc \\'Item Description\\', i.prod_cat \\'Product Category\\', c.code_desc \\'Product Category Description\\', i.price_cat \\'Price Category\\', i.uom \\'UOM\\', i.landed_cost \\'Landed Average Cost\\', i.last_cost \\'Last Cost\\', i.new_Cost \\'New Cost\\',  d.max_cost \\'On Order Cost\\', i.last_sold \\'Last Sold\\', i.last_recd \\'Last Received\\', i.man_notes \\'Mandatory Notes\\', I.inactive \\'Inactive\\'\\nfrom item i\\njoin codes c on c.code_id = i.prod_cat and c.code_type = \\'P\\'\\nleft join (select d.item_no, d.manu_no, max(unit_cost) \\'max_cost\\'\\n             from po_Detl d\\n             join po_hedr h on h.po_no = d.po_no\\n             where h.shop_po = \\'N\\' and h.status <> \\'V\\' and h.status <> \\'C\\' and d.bal_of_ord > 0 and d.status <> \\'V\\' and d.status <> \\'C\\'\\n             group by d.item_no, d.manu_no) d on d.item_no = i.item_no and d.manu_no = i.manu_no\\n\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ItemFile",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: '/*Rev 1.  Might want country name added too instead of just code.  5-2-23\\n*/\\nselect c.cust_no \\'Cust No\\', c.cust_name \\'Cust_Name\\', c.cust_addr1 \\'Address 1\\', c.cust_addr2 \\'Address 2\\', c.cust_addr3 \\'Address 3\\', c.cust_addr4 \\'Address 4\\',\\n        c.cust_city \\'Cust City\\', c.cust_state \\'Cust State\\', c.cust_zip \\'Cust Zip\\', c.cust_cntry \\'Country\\', c.slsman_1 \\'Salesmen 1\\', s1.slsman_nam \\'Salesmen 1 Name\\', \\n          c.slsman_2 \\'Salesmen 2\\', s2.slsman_nam \\'Salesmen 2 Name\\', c.cust_type \\'Cust Type Code\\', \\n          case when c.cust_type like \\'A%\\' then \\'Subcontractor\\'\\n                                                            when c.cust_type like \\'B%\\' then \\'OEM\\'\\n                                                            when (c.cust_type like \\'C%\\' or c.cust_Type like \\'D%\\') then \\'Aftermarket\\'\\n                                                            when c.cust_type like \\'E%\\' then \\'Government\\'\\n                                                            when c.cust_type like \\'F%\\' then \\'Franchised Distributor\\'\\n                                                            when c.cust_type like \\'G%\\' then \\'Broker/Disty Not Franchised\\'\\n                                                                           when c.cust_type like \\'I%\\' then \\'Intercompany\\'\\n                                                               else \\'Other\\' \\n                                                               end as \\'Customer Type Description\\', C.active \\'Active\\' \\nfrom customer c\\njoin slsman s1 on s1.slsman_no = c.slsman_1\\nleft join slsman s2 on s2.slsman_no = c.slsman_2',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> CustomerFile",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: '/* Using 250 pcs for both kitting and VA items\\' reorder qty per Mitch\\'s email on 5-2-23, subject line \"Board update\".  For kits, might add the component \\n    with the highest stocking qty as the reorder level down the road. - Ty 5-2-23\\n*/\\nselect i.item_no \\'SKU\\', i.manu_no \\'Manu No\\', w.vend_no \\'Vend No\\', case when w.min_ord_qty = \\'0\\' then x.min_ord_qty else w.min_ord_qty end as \\'Stock Reorder Qty\\'\\nfrom item i\\njoin itm_vend w on w.item_no = i.item_no and w.manu_no = i.manu_no\\n       join (select w.item_no, w.manu_no, v.vend_no, v.min_ord_qty\\n                from itm_Whse w\\n                join itm_vend v on v.item_no = w.item_no and v.manu_no = w.manu_no\\n                where w.stk_item = \\'Y\\' and reorder_lvl > 0 and v.prim_vend = \\'Y\\') x on x.item_no = i.item_no\\nwhere w.prim_vend = \\'Y\\' \\nunion\\nselect i.item_no, i.manu_no, \\'SHOP\\', \\'250\\'\\nfrom item i\\njoin (select distinct concat(d.kit_item, d.kit_manu) \\'ident\\', d.kit_item, d.kit_manu\\n          from kit_Detl d\\n          join (select d.kit_item, d.kit_manu, d.kit_REv_no, count(*) \\'stock_kit\\'\\n              from kit_Detl d\\n              join   (select distinct concat(w.item_no,w.manu_no) \\'identifier\\', w.item_no, w.manu_no\\n                           from itm_whse w\\n                           where  stk_item = \\'Y\\') e on e.item_no = d.item_no and e.manu_no = d.manu_no\\n              group by  d.kit_item, d.kit_manu, d.kit_REv_no) x on x.kit_item = d.kit_item and x.kit_manu = d.kit_manu and x.kit_rev_no = d.kit_rev_no\\n          join item i on i.item_no = d.kit_item and i.manu_no = d.kit_manu\\n          join kit_hedr h on h.item_int_id = i.item_int_id and h.kit_rev_no = d.kit_rev_no\\ngroup by d.kit_item, d.kit_manu, d.kit_rev_no, h.qk_rev, x.stock_kit\\nhaving count(*) = x.stock_kit) m on m.kit_item = i.item_no\\n\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> StockingFile",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select dbo.fnget_lot_cost(v.lot_no) \\'Lot Cost\\', v.lot_no \\'Lot No\\', v.item_no \\'SKU\\', v.manu_no \\'Manu\\', v.whse_cd \\'Warehouse\\', v.orig_qty \\'Original Quantity\\', \\n          v.bal_of_lot \\'Balance of Lot\\', v.dm_qty \\'DM Quantity\\', v.qty_commit \\'Quantity Committed\\'\\nfrom lot_hedr v\\nwhere (v.bal_of_lot > 0 or v.dm_qty > 0)',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> InventoryFile",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select \\'end of inbound\\' as Status',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EndFIle",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select h.vend_no, d.*\\nfrom po_Detl d\\njoin po_hedr h on h.po_no = d.po_no\\nwhere (h.vend_no = \\'BJG\\' or h.vend_no = \\'GLEN\\') and d.status <> \\'V\\' and h.status <> \\'V\\' and d.create_dt > getdate() - 7\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ProcurementInfoEmail",
				"ItemFile sort(asc(SKU, true)) ~> OrderByItemNO",
				"Transfer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'sftpfiles',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[($transfile)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> TransferFile",
				"OrderByItemNO sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'sftpfiles',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[($itemfile)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 2,",
				"     partitionBy('hash', 1)) ~> ItemFileOut",
				"CustomerFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'sftpfiles',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[($customerfile)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 3,",
				"     partitionBy('hash', 1)) ~> CustomerFileOut",
				"StockingFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'sftpfiles',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[($stockingfile)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 4,",
				"     partitionBy('hash', 1)) ~> StockingFileOut",
				"InventoryFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'sftpfiles',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[($invfile)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 5,",
				"     partitionBy('hash', 1)) ~> InventoryFileOut",
				"EndFIle sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'sftpfiles',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[($status)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true) ~> sink1",
				"ProcurementInfoEmail sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'datafactoryfiles',",
				"     folderPath: 'TyReport2',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['Procurement.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true) ~> sink2"
			]
		}
	}
}